View(complete_obs)
View(complete_obs)
View(complete_obs)
View(complete_obs)
View(complete_obs)
View(complete_obs)
directory_call <- "~/Documents/datasciencecoursera/02_R_Programming/specdata"
id_call <- c(2, 4, 8, 10, 12)
complete_obs <- complete(directory_call,id_call)
View(complete_obs)
View(complete_obs)
directory_call <- "~/Documents/datasciencecoursera/02_R_Programming/specdata"
id_call <- 30:25
complete_obs <- complete(directory_call,id_call)
View(complete_obs)
View(complete_obs)
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id) ## id change from "1" to "001" etc
filenames_full <- paste(directory, filenames, sep="/") ## prepend the directory path
obs_frame <- data.frame(id = id, nobs= NA)
for(i in 1:length(id)){
data_intermediate <-read.csv(filenames_full[i])
data_intermediate_complete <- na.omit(data_intermediate)
##ok <- complete.cases(data_intermediate)
##sum(ok)
obs_frame[i,2] <- nrow(data_intermediate_complete)
}
obs_frame
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
}
directory_call <- "~/Documents/datasciencecoursera/02_R_Programming/specdata"
id_call <- 30:25
complete_obs <- complete(directory_call,id_call)
directory_call <- "~/Documents/datasciencecoursera/02_R_Programming/specdata"
id_call <- c(2, 4, 8, 10, 12))
complete_obs <- complete(directory_call,id_call)
directory_call <- "~/Documents/datasciencecoursera/02_R_Programming/specdata"
id_call <- c(2, 4, 8, 10, 12))
complete_obs <- complete(directory_call,id_call)
directory_call <- "~/Documents/datasciencecoursera/02_R_Programming/specdata"
id_call <- c(2, 4, 8, 10, 12)
complete_obs <- complete(directory_call,id_call)
View(complete_obs)
directory_call <- "~/Documents/datasciencecoursera/02_R_Programming/specdata"
id_call <- 3
complete_obs <- complete(directory_call,id_call)
View(complete_obs)
getwd
getwd()
setwd("~/Documents/datasciencecoursera/02_R_Programming")
getwd()
?cor
zz <- list.files(directory_call)
length(zz)
id <- length(list.files(directory_call))
id
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
corr_current <- cor(data[[nitrate]],data[[sulfate]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
}
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
corr_frame
View(`001`)
View(`001`)
rm(id)
rm(zz)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
corr_current <- cor(data[[nitrate]],data[[sulfate]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
corr_frame
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
corr_current <- cor(data[[nitrate]],data[[sulfate]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
corr_current <- cor(data[[nitrate]],data[[sulfate]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
}
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
corr_frame
rm(id_call)
rm(directory_call)
corr_vector = NULL
id <- length(list.files(dir_call))
filename <- sprintf("%03d.csv", 1)
filename <- paste(dir_call, filename, sep="/")
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
corr_current <- cor(data[[nitrate]],data[[sulfate]])
View(data)
View(data)
data_clean[complete.cases(data),]
data[complete.cases(data),]
rm(data)
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[[nitrate]],data_clean[[sulfate]])
sul <- data_clean[[sulfate]]
View(data_clean)
View(data_clean)
sul <- data_clean[["sulfate"]]
rm(sul)
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- rbind(corr_vector,corr_current)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
}
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
corr_frame
rm(data,data_clean)
rm(corr_vector)
rm(corr_current)
rm(corr_frame)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
corr_vector
}
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
corr_frame
View(corr_frame)
View(corr_frame)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
}
rm(corr_frame)
rm(complete_obs)
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- rbind(corr_vector,corr_current)
}
}
corr_vector
}
rm(corr_frame)
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
View(corr_frame)
View(corr_frame)
summary(corr_frame)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = NULL
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- append(corr_vector,corr_current)
}
}
corr_vector
}
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
summary(corr_frame)
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 400
corr_frame <- corr(dir_call,thres_call)
summary(corr_frame)
dir_call <-  "~/Documents/datasciencecoursera/02_R_Programming/specdata"
thres_call <- 5000
corr_frame <- corr(dir_call,thres_call)
summary(corr_frame)
length(corr_frame)
summary(corr_frame)
corr_frame <- corr(dir_call)
corr_frame <- corr(dir_call)
summary(corr_frame)
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = vector('numeric')
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- append(corr_vector,corr_current)
}
}
corr_vector
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
corr_vector = numeric()
id <- length(list.files(directory))
for(i in 1:id){
filename <- sprintf("%03d.csv", i) ## id change from "1" to "001" etc
filename <- paste(directory, filename, sep="/") ## prepend the directory path
data <-read.csv(filename)
num_obs <- nrow(na.omit(data))
if(num_obs > threshold){
data_clean <- data[complete.cases(data),]
corr_current <- cor(data_clean[["nitrate"]],data_clean[["sulfate"]])
corr_vector <- append(corr_vector,corr_current)
}
}
corr_vector
}
thres_call <- 5000
corr_frame <- corr(dir_call,thres_call)
summary(corr_frame)
thres_call <- 150
corr_frame <- corr(dir_call,thres_call)
summary(corr_frame)
getwd()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
bye()
library(datasets)
data(iris)
?iris
view(iris)
View(iris)
mean(iris,Sepal.length)
mean(iris[[Sepal.length]])
z <- iris.Sepal.Length
z <- iris$Sepal.Length
mean(z)
mean(iris$Sepal.length)
z <- iris[[Sepal.Length]]
colMeans(iris)
?iris
str(iris)
colMean(iris)
colMeans(iris)
colMeans(iris[[1:4]])
colMeans(iris[[1-4]])
lapply(mean,iris)
iris_numeric <- sapply(iris,is.numeric)
View(iris_numeric)
colMeans(iris_numeric)
colMeans(iris_numeric[,iris_numeric])
iris_numeric <- sapply(iris,is.numeric)
iris_numeric[ ,iris_numeric]
iris_numeric[iris_numeric, ]
iris[sapply(iris,is.numeric)]
colMeans(iris[sapply(iris,is.numeric)])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
rm(iris)
rm(iris_numeric)
rm(z)
library(datasets)
data(mtcars)
?mtcars
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
max(mtcars$cyl)
min(mtcars$cyl)
median(mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
z<- tapply(mtcars$hp, mtcars$cyl, mean)
z
z$8 - z$4
z[1] - z[3]
rm(z,mtcars)
debug(ls)
ls()
debug(ls)
ls()
library(datasets)
data(iris)
View(iris)
View(iris)
View(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(iris[, 1:4], 2, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
rm(iris,mtcars)
rm(iris,mtcars)
rm(iris,mtcars)
rm(iris,mtcars)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
Q
